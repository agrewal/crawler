// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package crawled_url

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CrawledUrl struct {
	_tab flatbuffers.Table
}

func GetRootAsCrawledUrl(buf []byte, offset flatbuffers.UOffsetT) *CrawledUrl {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CrawledUrl{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CrawledUrl) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CrawledUrl) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CrawledUrl) CrawlTs() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CrawledUrl) MutateCrawlTs(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CrawledUrl) CrawlId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CrawledUrl) Body() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CrawledUrlStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CrawledUrlAddCrawlTs(builder *flatbuffers.Builder, crawlTs int64) {
	builder.PrependInt64Slot(0, crawlTs, 0)
}
func CrawledUrlAddCrawlId(builder *flatbuffers.Builder, crawlId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(crawlId), 0)
}
func CrawledUrlAddBody(builder *flatbuffers.Builder, body flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(body), 0)
}
func CrawledUrlEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
